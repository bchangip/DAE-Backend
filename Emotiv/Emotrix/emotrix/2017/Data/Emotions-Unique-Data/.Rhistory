if(flag){
temp_count <- temp_count + 1
} else {
temp_t <- k - 1
flag <- TRUE
temp_count <- temp_count + 1
}
} else {
if(flag & temp_count > count){
count <- temp_count
t <- temp_t
temp_count <- 0
temp_t <- 0
}
flag <- FALSE
}
}
}
tiempo_seq <- c("Segundo Secuencia", t)
final_table <- rbind(tiempo_total, tiempo_inicial, tiempo_seq)
dir.create(folder, showWarnings = FALSE)
write.csv(final_table, file.path(folder, files[i]), row.names=FALSE)
# image_name <-  paste(file_name, ".png")
# image_path  <- paste("D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Graphics-Emotions/AF3/", image_name)
# png(filename=image_path)
# title <- paste(file_name," - Lectura de Electrodo AF3")
# plot(array_f3,yaxt="n",xlab = "Tiempo(s)", ylab = "Onda Presente", col="blue", main=title)
# axis(2, at=1:5, labels=c("Delta","Theta","Alpha","Beta","Gamma"))
# dev.off()
# print(file_name)
}
library(readr)
library(wavelets)
library(data.table)
library(signal)
setwd("D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data")
files <- list.files(path="D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data", pattern="csv$", full.names=FALSE, recursive=FALSE)
folder <- "Tiempos-Alpha/F3"
#BAND PASS FILTER
#arguments
# n: filter order
# W: (low, high) / Nyquist Frequency
# type: Pass Band
# plane: analog filter
bf <- butter(n=1,W=c(0.1, 30)/1024, type="pass",plane="s")
for(i in 1:length(files)){
csv <- read_csv(files[i], col_types = cols(`Exact Time` = col_double()))
DT <- data.table(csv)
file_name <- gsub(".csv", "", files[i])
initial_time <- DT$Time[1]
DT$Time <- DT$Time - initial_time
final_time <- DT$Time[nrow(DT)]
array_f3 <- c(0)
for(j in 0:final_time) {
second_dt <- DT[Time == j]
second_dt$F3 <- filter(bf,second_dt$F3)
second_dt$F4 <- filter(bf,second_dt$F4)
second_dt$AF3 <- filter(bf,second_dt$AF3)
second_dt$AF4 <- filter(bf,second_dt$AF4)
second_dt$O1 <- filter(bf,second_dt$O1)
second_dt$O2 <- filter(bf,second_dt$O2)
result = tryCatch({
wt_f3 <- dwt(as.numeric(second_dt$F3), filter='d4', n.levels=4, boundary="periodic", fast=FALSE)
wt_f4 <- dwt(as.numeric(second_dt$F4), filter='d4', n.levels=4, boundary="periodic", fast=FALSE)
wt_af3 <- dwt(as.numeric(second_dt$AF3), filter='d4', n.levels=4, boundary="periodic", fast=FALSE)
wt_af4 <- dwt(as.numeric(second_dt$AF4), filter='d4', n.levels=4, boundary="periodic", fast=FALSE)
wt_o1 <- dwt(as.numeric(second_dt$O1), filter='d4', n.levels=4, boundary="periodic", fast=FALSE)
wt_o2 <- dwt(as.numeric(second_dt$O2), filter='d4', n.levels=4, boundary="periodic", fast=FALSE)
f3_delta <- mean(as.numeric(wt_f3@W$W1))
f3_theta <- mean(as.numeric(wt_f3@W$W2))
f3_alfa <- mean(as.numeric(wt_f3@W$W3))
f3_beta <- mean(as.numeric(wt_f3@W$W4))
max <- max(f3_delta, f3_theta, f3_alfa, f3_beta)
if(f3_delta == max){
array_f3[j] <- 1
}
if(f3_theta == max){
array_f3[j] <- 2
}
if(f3_alfa == max){
array_f3[j] <- 3
}
if(f3_beta == max){
array_f3[j] <- 4
}
}, warning = function(w) {
array_f3[j] <- 0
}, error = function(e) {
array_f3[j] <- 0
}, finally = {
})
}
#para obtener cuanto tiempo predomina alfa
a <- table(array_f3)
tiempo_total <- c("Tiempo Total", unname(a[names(a)== 3]))
#para obtener el primer segundo en donde aparece alfa
tiempo_inicial <- c("Primer Segundo", which.max(array_f3 == 3) -1)
#para obtener el segundo en donde aparece la mayor secuencia de alfa
t <- 0
temp_t <- 0
flag <- FALSE
count <- 0
temp_count <- 0
alfa <- 3
for(k in 1:length(array_f3)) {
if(!is.na(array_f3[k])){
if(array_f3[k] == alfa){
if(flag){
temp_count <- temp_count + 1
} else {
temp_t <- k - 1
flag <- TRUE
temp_count <- temp_count + 1
}
} else {
if(flag & temp_count > count){
count <- temp_count
t <- temp_t
temp_count <- 0
temp_t <- 0
}
flag <- FALSE
}
}
}
tiempo_seq <- c("Segundo Secuencia", t)
final_table <- rbind(tiempo_total, tiempo_inicial, tiempo_seq)
dir.create(folder, showWarnings = FALSE)
write.csv(final_table, file.path(folder, files[i]), row.names=FALSE)
# image_name <-  paste(file_name, ".png")
# image_path  <- paste("D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Graphics-Emotions/AF3/", image_name)
# png(filename=image_path)
# title <- paste(file_name," - Lectura de Electrodo AF3")
# plot(array_f3,yaxt="n",xlab = "Tiempo(s)", ylab = "Onda Presente", col="blue", main=title)
# axis(2, at=1:5, labels=c("Delta","Theta","Alpha","Beta","Gamma"))
# dev.off()
# print(file_name)
}
remove(csv)
remove(DT)
remove(second_dt)
remove(array_f3)
remove(bf)
remove(f3_alfa)
remove(f3_beta)
remove(f3_delta)
remove(f3_theta)
remove(file_name)
remove(files)
remove(final_time)
remove(i)
remove(image_name)
remove(image_path)
remove(initial_time)
remove(j)
remove(max)
remove(result)
remove(title)
remove(wt_af3)
remove(wt_af4)
remove(wt_f3)
remove(wt_f4)
remove(wt_o1)
remove(wt_o2)
remove(final_table)
remove(table)
remove(a)
remove(alfa)
remove(count)
remove(flag)
remove(folder)
remove(k)
remove(t)
remove(temp_count)
remove(temp_t)
remove(tiempo_inicial)
remove(tiempo_seq)
remove(tiempo_total)
library(readr)
library(wavelets)
library(data.table)
library(signal)
setwd("D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data")
csv <- read_csv("17M2311.csv", col_types = cols(`Exact Time` = col_double()))
DT <- data.table(csv)
table <- DT[`Selected Emotion` == "happy"]
happy_table <- data.table()
for(i in 1:nrow(table)) {
rbind(happy_table, DT["Time" == table[i]$Time | "Time" == (table[i]$Time - 1) | "Time" == (table[i]$Time + 1)])
}
table[1]$Time
table[1]$Time - 1
table[1]$Time + 1
happy_table <- rbind(happy_table, DT["Time" == table[1]$Time | "Time" == (table[1]$Time - 1) | "Time" == (table[1]$Time + 1)])
happy_table <-  DT["Time" == table[1]$Time | "Time" == (table[1]$Time - 1) | "Time" == (table[1]$Time + 1)]
rbind(happy_table, DT["Time" == table[1]$Time | "Time" == (table[1]$Time - 1) | "Time" == (table[1]$Time + 1)])
happy_table <-  DT[Time == table[1]$Time | "Time" == (table[1]$Time - 1) | "Time" == (table[1]$Time + 1)]
happy_table <-  DT[Time == table[1]$Time | Time == (table[1]$Time - 1) | Time == (table[1]$Time + 1)]
rbind(happy_table, DT["Time" == table[2]$Time | "Time" == (table[2]$Time - 1) | "Time" == (table[2]$Time + 1)])
csv <- read_csv("17M2311.csv", col_types = cols(`Exact Time` = col_double()))
DT <- data.table(csv)
table <- DT[`Selected Emotion` == "happy"]
happy_table <- data.table()
for(i in 1:nrow(table)) {
happy_table <- rbind(happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
setwd("D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data")
#Values
count_happy <- 0
count_sad <- 0
count_other <- 0
count_training <- 480
#Trainning Tables
happy_table <- data.table()
other_table <- data.table()
sad_table <- data.table()
#Cross-Over Validation Tables
co_happy_table <- data.table()
co_other_table <- data.table()
co_sad_table <- data.table()
csv <- read_csv("17M2311.csv", col_types = cols(`Exact Time` = col_double()))
DT <- data.table(csv)
if(count_happy < count_training){
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
if(count_happy == count_training){
co_happy_table <- rbind(co_happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
happy_table <- rbind(happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_happy <- count_happy + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_happy_table <- rbind(co_happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
if(count_sad < count_training){
table <- DT[`Selected Emotion` == "sad"]
for(i in 1:nrow(table)) {
if(count_sad == count_training){
co_sad_table <- rbind(co_sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
sad_table <- rbind(sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_sad <- count_sad + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_sad_table <- rbind(co_sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
if(count_other < count_training){
table <- DT[`Selected Emotion` == "other"]
for(i in 1:nrow(table)) {
if(count_other == count_training){
co_other_table <- rbind(co_other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
other_table <- rbind(other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_other <- count_other + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_other_table <- rbind(co_other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
library(readr)
library(wavelets)
library(data.table)
library(signal)
setwd("D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data")
#Values
count_happy <- 0
count_sad <- 0
count_other <- 0
count_training <- 480
#Trainning Tables
happy_table <- data.table()
other_table <- data.table()
sad_table <- data.table()
#Cross-Over Validation Tables
co_happy_table <- data.table()
co_other_table <- data.table()
co_sad_table <- data.table()
for(i in 1:length(files)){
csv <- read_csv(files[i], col_types = cols(`Exact Time` = col_double()))
DT <- data.table(csv)
if(count_happy < count_training){
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
if(count_happy == count_training){
co_happy_table <- rbind(co_happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
happy_table <- rbind(happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_happy <- count_happy + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_happy_table <- rbind(co_happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
if(count_sad < count_training){
table <- DT[`Selected Emotion` == "sad"]
for(i in 1:nrow(table)) {
if(count_sad == count_training){
co_sad_table <- rbind(co_sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
sad_table <- rbind(sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_sad <- count_sad + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_sad_table <- rbind(co_sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
if(count_other < count_training){
table <- DT[`Selected Emotion` == "other"]
for(i in 1:nrow(table)) {
if(count_other == count_training){
co_other_table <- rbind(co_other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
other_table <- rbind(other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_other <- count_other + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_other_table <- rbind(co_other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
}
library(readr)
library(wavelets)
library(data.table)
library(signal)
setwd("D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data")
files <- list.files(path="D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data", pattern="csv$", full.names=FALSE, recursive=FALSE)
#Values
count_happy <- 0
count_sad <- 0
count_other <- 0
count_training <- 480
#Trainning Tables
happy_table <- data.table()
other_table <- data.table()
sad_table <- data.table()
#Cross-Over Validation Tables
co_happy_table <- data.table()
co_other_table <- data.table()
co_sad_table <- data.table()
for(i in 1:length(files)){
csv <- read_csv(files[i], col_types = cols(`Exact Time` = col_double()))
DT <- data.table(csv)
if(count_happy < count_training){
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
if(count_happy == count_training){
co_happy_table <- rbind(co_happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
happy_table <- rbind(happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_happy <- count_happy + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_happy_table <- rbind(co_happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
if(count_sad < count_training){
table <- DT[`Selected Emotion` == "sad"]
for(i in 1:nrow(table)) {
if(count_sad == count_training){
co_sad_table <- rbind(co_sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
sad_table <- rbind(sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_sad <- count_sad + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_sad_table <- rbind(co_sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
if(count_other < count_training){
table <- DT[`Selected Emotion` == "other"]
for(i in 1:nrow(table)) {
if(count_other == count_training){
co_other_table <- rbind(co_other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
other_table <- rbind(other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_other <- count_other + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_other_table <- rbind(co_other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
}
table <- co_happy_table[`Selected Emotion` == "happy"]
nrow(unique(table$Time))
unique(table$Time)
table$Time
View(happy_table)
library(readr)
library(wavelets)
library(data.table)
library(signal)
setwd("D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data")
files <- list.files(path="D:/Diego Jacobs/Documents/Emotrix/emotrix/2017/Data/Emotions-Unique-Data", pattern="csv$", full.names=FALSE, recursive=FALSE)
#Values
count_happy <- 0
count_sad <- 0
count_other <- 0
count_training <- 480
#Trainning Tables
happy_table <- data.table()
other_table <- data.table()
sad_table <- data.table()
#Cross-Over Validation Tables
co_happy_table <- data.table()
co_other_table <- data.table()
co_sad_table <- data.table()
for(i in 1:length(files)){
csv <- read_csv(files[i], col_types = cols(`Exact Time` = col_double()))
DT <- data.table(csv)
if(count_happy < count_training){
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
if(count_happy == count_training){
co_happy_table <- rbind(co_happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
happy_table <- rbind(happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_happy <- count_happy + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_happy_table <- rbind(co_happy_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
if(count_sad < count_training){
table <- DT[`Selected Emotion` == "sad"]
for(i in 1:nrow(table)) {
if(count_sad == count_training){
co_sad_table <- rbind(co_sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
sad_table <- rbind(sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_sad <- count_sad + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_sad_table <- rbind(co_sad_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
if(count_other < count_training){
table <- DT[`Selected Emotion` == "other"]
for(i in 1:nrow(table)) {
if(count_other == count_training){
co_other_table <- rbind(co_other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
} else{
other_table <- rbind(other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
count_other <- count_other + 1
}
}
} else {
table <- DT[`Selected Emotion` == "happy"]
for(i in 1:nrow(table)) {
co_other_table <- rbind(co_other_table, DT[Time == table[i]$Time | Time == (table[i]$Time - 1) | Time == (table[i]$Time + 1)])
}
}
}
dir.create(folder, showWarnings = FALSE)
write.csv(happy_table, file.path(folder, "Happy-Training.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(other_table, file.path(folder, "Other-Training.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(sad_table, file.path(folder, "Sad-Training.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(co_happy_table, file.path(folder, "Happy-Cross.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(co_other_table, file.path(folder, "Other-Cross.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(co_sad_table, file.path(folder, "Sad-Cross.csv"), row.names=FALSE)
folder <- "Training-Data"
dir.create(folder, showWarnings = FALSE)
write.csv(happy_table, file.path(folder, "Happy-Training.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(other_table, file.path(folder, "Other-Training.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(sad_table, file.path(folder, "Sad-Training.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(co_happy_table, file.path(folder, "Happy-Cross.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(co_other_table, file.path(folder, "Other-Cross.csv"), row.names=FALSE)
dir.create(folder, showWarnings = FALSE)
write.csv(co_sad_table, file.path(folder, "Sad-Cross.csv"), row.names=FALSE)
